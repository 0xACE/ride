utf8, no bom, \n as eol, eol at eof
terse is better than verbose
2 spaces for indentation
soft limit of 120 chars per line
  vertical space is precious, so make good use of the horizontal
no unnecessary whitespace
  except maybe when initializing multiple vars with long expressions:
        var x=a(b,c)?d:e(f,g), y=0, z=[h,i,j[k],l], t
  leave a space before //
  align whatever looks suitable for alignment
no blank lines unless really important
no unnecessary {}
  except: if you {} the if, you should {} the else too, or vice versa
no unnecessary ; at the eol
  seriously, the dreaded ASI (automatic semicolon insertion) isn't as evil as people think
  one exception: when a line begins with ( or [ put a ; before it
  http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding
'singly-quoted strings' unless "there's an apostrophe inside"
=== instead of == (here's why: https://dorey.github.io/JavaScript-Equality-Table)
  ==null can be fine, it captures both ===null and ===undefined.
  same for !== and !=
single-letter names are good, ideally with a comment on declaration
  _ is usually an ignored variable or parameter
  variable names for jQuery wrappers start with a $
  be generous with the "var" keyword even when it can be omitted or merged with another "var"
for-s should always have a var: for(var i=0;i<n;i++)
align ifs
  like so:
        if(a){
          b
        }else{
          c
        }
  or like so:
        if(a){b}
        else{c}
  ideally
        if(a){b}else{c}
prefer ternary if (a?b:c) over an if statement
it's okay to use && and || as a substitute for if
  assignment requires parens: a&&(b=c)
no parens after arg-less constructor: d=new Date //instead of d=new Date()
omit "new" if possible: RegExp(s) //instead of new RegExp(s)
!! coerces to boolean, + to number, ''+ to string
prefer 0 and 1 over false and true
  note that when returning false from a DOM event handler, 0 doesn't work but !1 does
closures are faster than .bind()
for is faster than .forEach() .map() .filter() and .reduce()
the "soaking" pattern from CoffeeScript: a?.b?.c?.f?()
  can be replaced with: var x=a;x=x&&x.b;x=x&&x.c;x=x&&x.f;x&&x()
  or even:              var x=a&&a.b;x=x&&x.c;x&&x.f&&x.f()
use es6 in .js files that have no chance of being loaded in ie<11 and mobile browsers
rule #1: every rule has an exception
