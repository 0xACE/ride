#!/usr/bin/env coffee
http = require 'http'
cheerio = require 'cheerio'
{basename} = require 'path'

log = (s) -> process.stderr.write s + '\n'; return
err = (s) -> log 'ERROR: ' + s; process.exit 1; return

get = (host, path, callback) ->
  http.get {host, path}, (res) ->
    data = ''; res.setEncoding 'utf8'
    res.on 'data', (chunk) -> data += chunk; return
    res.on 'end', -> callback data; return
    return
  .on 'error', (e) -> console.error e; process.exit 1; return
  return

G = # geometries http://www.abreojosensamblador.net/Productos/AOE/html/Pags_en/ApF.html

  iso:
    re: ///^
      ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐.*\n
      │....│....│....│....│....│....│....│....│....│....│....│....│....│.........│.*\n
      │....│....│....│....│....│....│....│....│....│....│....│....│....│.........│.*\n
      ├────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬──────┤.*\n
      │.......│....│....│....│....│....│....│....│....│....│....│....│....│......│.*\n
      │.......│....│....│....│....│....│....│....│....│....│....│....│....│......│.*\n
      ├───────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐.....│.*\n
      │........│....│....│....│....│....│....│....│....│....│....│....│....│.....│.*\n
      │........│....│....│....│....│....│....│....│....│....│....│....│....│.....│.*\n
      ├──────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴─────┤.*\n
      │......│....│....│....│....│....│....│....│....│....│....│....│............│.*\n
      │......│....│....│....│....│....│....│....│....│....│....│....│............│.*\n
      ├──────┴┬───┴─┬──┴───┬┴────┴────┴────┴────┴────┴┬───┴──┬─┴────┼─────┬──────┤.*
    $///
    sc: [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0]
      [0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0]
      [0, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0]
      [0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0]
    ]

  ansi:
    re: ///^
      ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐.*\n
      │....│....│....│....│....│....│....│....│....│....│....│....│....│.........│.*\n
      │....│....│....│....│....│....│....│....│....│....│....│....│....│.........│.*\n
      ├────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬──────┤.*\n
      │.......│....│....│....│....│....│....│....│....│....│....│....│....│......│.*\n
      │.......│....│....│....│....│....│....│....│....│....│....│....│....│......│.*\n
      ├───────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴──────┤.*\n
      │........│....│....│....│....│....│....│....│....│....│....│....│..........│.*\n
      │........│....│....│....│....│....│....│....│....│....│....│....│..........│.*\n
      ├────────┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──────────┤.*\n
      │...........│....│....│....│....│....│....│....│....│....│....│............│.*\n
      │...........│....│....│....│....│....│....│....│....│....│....│............│.*\n
      ├───────┬───┴─┬──┴───┬┴────┴────┴────┴────┴────┴┬───┴──┬─┴────┼─────┬──────┤.*
    $///
    sc: [
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0]
      [0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
      [0, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0]
      [0, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0]
    ]

result = geom: {_: 'iso'}, layouts: {}

processContent = (data) ->
  cheerio.load(data)('pre').text()
    .replace /\r\n/g, '\n'
    .replace /\nDyalog APL\/([A-Z]{2}).*\n¯*\n(┌(?:.*\n){12}.*)/gm, (_, lc, desc) ->
      l = result.layouts[lc] = for [0..3] then for [0..57] then ' '
      g = null
      for g1, {re, sc} of G when desc.match re then g = g1; g != 'iso' && result.geom[lc] = g; break
      g || err "unrecognized geometry for #{lc} layout"
      lines = desc.split '\n'
      # r,c: coords of the key in the keyboard    x,y: coords of the symbol on the key
      for r in [0..3]
        for y in [0..1]
          for chunk, c in lines[1 + y + 3*r][1..73].split /[─│┌┬┐├┼┤└┴┘]+/g when sc[r][c]
            if chunk[1] != ' ' || chunk[3] != ' ' then err "bad key in #{lc} layout -- #{JSON.stringify chunk}"
            for x in [0..1]
              l[2*x + 1 - y][sc[r][c]] = chunk[2 * x]
      for i in [0..3] then l[i] = l[i].join ''
      console.assert l[0].length == l[1].length == l[2].length == l[3].length
      return
  return

writeOutput = ->
  lcs = for lc of result.layouts then lc
  process.stdout.write """
    // generated by #{basename __filename}
    D.kbds = {
      geom: #{JSON.stringify result.geom},
      layouts: {
        #{lcs.sort().map((lc) ->
          l = result.layouts[lc]; "#{lc}: [\n      #{l.map(JSON.stringify).join ',\n      '},\n    ]"
        ).join ',\n    '}
      }
    };\n
  """
  return

get 'dfns.dyalog.com', '/n_keyboards.htm', (data) ->
  processContent data
  writeOutput()
  return
